<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"

       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">

    <!--Movies-->
    <bean id="allMoviesSql" class="java.lang.String">
        <constructor-arg value="SELECT * FROM v_movies /*ORDER BY*/;"/>
    </bean>

    <bean id="randomMoviesSql" class="java.lang.String">
        <constructor-arg value="SELECT * FROM v_movies ORDER BY random() limit ?;"/>
    </bean>

    <bean id="moviesByGenreIdSql" class="java.lang.String">
        <constructor-arg value="
        SELECT vm.*
          FROM v_movies vm
               INNER JOIN movie_genre mg
                  ON vm.id = mg.movie_id
         WHERE mg.genre_id = ?
         /*ORDER BY*/ ;"/>
    </bean>

    <bean id="movieByIdSql" class="java.lang.String">
        <constructor-arg value="SELECT * FROM v_movies WHERE id = ?;"/>
    </bean>

    <bean id="movieRowMapper" class="com.siatsenko.movieland.dao.jdbc.mapper.MovieRowMapper">
    </bean>

    <bean id="jdbcMovieDao" class="com.siatsenko.movieland.dao.jdbc.JdbcMovieDao">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
        <property name="sqlBuilder" ref="sqlBuilder"/>
        <property name="randomCount" value="2"/>
        <property name="movieRowMapper" ref="movieRowMapper"/>
        <property name="jdbcCountryDao" ref="jdbcCountryDao"/>
        <property name="jdbcGenreDao" ref="jdbcGenreDao"/>
        <property name="jdbcReviewDao" ref="jdbcReviewDao"/>
        <property name="allMoviesSql" ref="allMoviesSql"/>
        <property name="randomMoviesSql" ref="randomMoviesSql"/>
        <property name="moviesByGenreIdSql" ref="moviesByGenreIdSql"/>
        <property name="movieByIdSql" ref="movieByIdSql"/>
    </bean>

<!--Genres    -->
    <bean id="allGenresSql" class="java.lang.String">
        <constructor-arg value="SELECT * FROM genre;"/>
    </bean>

    <bean id="genresByMovieIdSql" class="java.lang.String">
        <constructor-arg value="
        SELECT g.*
          FROM movie_genre mg
               INNER JOIN genre g
                  ON mg.genre_id = g.id
         WHERE movie_id = ?;"/>
    </bean>

    <bean id="genreRowMapper" class="com.siatsenko.movieland.dao.jdbc.mapper.GenreRowMapper">
    </bean>

    <bean id="jdbcGenreDao" class="com.siatsenko.movieland.dao.jdbc.JdbcGenreDao">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
        <property name="genreRowMapper" ref="genreRowMapper"/>
        <property name="allGenresSql" ref="allGenresSql"/>
        <property name="genresByMovieIdSql" ref="genresByMovieIdSql"/>
    </bean>

    <!--Reviews    -->
    <bean id="reviewsByMovieIdSql" class="java.lang.String">
        <constructor-arg value="SELECT r.* FROM review r WHERE r.movie_id = ?;"/>
    </bean>

    <bean id="reviewRowMapper" class="com.siatsenko.movieland.dao.jdbc.mapper.ReviewRowMapper">
    </bean>

    <bean id="jdbcReviewDao" class="com.siatsenko.movieland.dao.jdbc.JdbcReviewDao">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
        <property name="reviewRowMapper" ref="reviewRowMapper"/>
        <property name="reviewsByMovieIdSql" ref="reviewsByMovieIdSql"/>
        <property name="jdbcUserDao" ref="jdbcUserDao"/>
    </bean>

    <!--Users    -->
    <bean id="usersByReviewIdSql" class="java.lang.String">
        <constructor-arg value="
        SELECT u.*
          FROM review r
               INNER JOIN users u
                 ON r.user_id = u.id
         WHERE r.id = ?;"/>
    </bean>

    <bean id="userRowMapper" class="com.siatsenko.movieland.dao.jdbc.mapper.UserRowMapper">
    </bean>

    <bean id="jdbcUserDao" class="com.siatsenko.movieland.dao.jdbc.JdbcUserDao">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
        <property name="userRowMapper" ref="userRowMapper"/>
        <property name="usersByReviewIdSql" ref="usersByReviewIdSql"/>
    </bean>

    <!--Countries    -->
    <bean id="countriesByMovieIdSql" class="java.lang.String">
        <constructor-arg value="
        SELECT c.*
          FROM movie_country mc
               INNER JOIN country c
        	     ON mc.country_id = c.id
         WHERE movie_id = ?;"/>
    </bean>

    <bean id="countryRowMapper" class="com.siatsenko.movieland.dao.jdbc.mapper.CountryRowMapper">
    </bean>

    <bean id="jdbcCountryDao" class="com.siatsenko.movieland.dao.jdbc.JdbcCountryDao">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
        <property name="countryRowMapper" ref="countryRowMapper"/>
        <property name="countriesByMovieIdSql" ref="countriesByMovieIdSql"/>
    </bean>

    <!--DB-->
    <jdbc:embedded-database id="dataSource" type="HSQL">
        <jdbc:script location="classpath:db/create-db.sql"/>
        <jdbc:script location="classpath:db/fill-db.sql"/>
    </jdbc:embedded-database>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="DataSource" ref="dataSource"/>
    </bean>

    <bean id="sqlBuilder" class="com.siatsenko.movieland.dao.jdbc.sql.SqlBuilder">
    </bean>

    <bean id="requestParamsService" class="com.siatsenko.movieland.service.impl.DefaultMovieRequestParamsService">
    </bean>

</beans>
